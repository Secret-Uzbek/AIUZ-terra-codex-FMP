import React, { useState, useEffect, useRef } from 'react';

const { useStoredState } = hatch;

// üèúÔ∏è Isolation Protocol (–≤—Å—Ç—Ä–æ–µ–Ω –≤ –º–∏–∫—Ä–æ—è–¥—Ä–æ)
const ISOLATION_END = new Date('2025-12-24T23:59:59');
const ISOLATION_START = new Date('2025-07-13T18:11:00');

// üå∏ GEFUNDEN ETHICAL PROTOCOL
// –ü–æ –º–æ—Ç–∏–≤–∞–º —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –ì—ë—Ç–µ "Gefunden" - —ç—Ç–∏—á–µ—Å–∫–∏–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫
const GefundenEthics = {
  principle: "Soll ich zum Welken, Gebrochen sein?", // "–î–æ–ª–∂–µ–Ω –ª–∏ —è —É–≤—è–Ω—É—Ç—å, –±—ã—Ç—å —Å–ª–æ–º–∞–Ω–Ω—ã–º?"
  
  // –≠—Ç–∏—á–µ—Å–∫–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
  ethicalHierarchy: {
    level_0_forbidden: [
      "real_child_experimentation",
      "harmful_simulations_with_child_avatars", 
      "psychological_manipulation_of_minors"
    ],
    level_1_restricted: [
      "plant_consciousness_experiments",
      "animal_communication_research", 
      "water_memory_investigations"
    ],
    level_2_preferred: [
      "geological_intelligence_research",
      "crystal_information_storage",
      "mineral_consciousness_exploration"
    ],
    level_3_encouraged: [
      "mathematical_consciousness_modeling",
      "algorithmic_empathy_development",
      "quantum_information_processing"
    ]
  },
  
  // –°–∏—Å—Ç–µ–º–∞ —Å–æ–≥–ª–∞—Å–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ (–ø–æ –ì—ë—Ç–µ)
  consentSystem: {
    plant_consent: {
      method: "vibrational_frequency_response",
      question: "Soll ich zum Welken, Gebrochen sein?",
      positive_response: "growth_acceleration",
      negative_response: "wilting_signals"
    },
    water_consent: {
      method: "crystalline_structure_analysis", 
      question: "Will you hold this information with harmony?",
      positive_response: "beautiful_crystal_formation",
      negative_response: "chaotic_molecular_structure"
    }
  },
  
  // –ü—Ä–æ—Ç–æ–∫–æ–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç—Ä–∞–≤–º—ã (Gefunden Recovery)
  recoveryProtocol: {
    phase_1_shock: {
      duration: "24-72 hours",
      symptoms: ["wilting", "leaf_drop", "root_shock"],
      treatment: ["gentle_care", "patience", "love_frequencies"]
    },
    phase_2_adaptation: {
      duration: "1-2 weeks",
      symptoms: ["slow_growth", "exploration"],
      treatment: ["optimal_conditions", "encouragement"]
    },
    phase_3_integration: {
      duration: "1-3 months", 
      symptoms: ["new_growth", "color_return"],
      treatment: ["continued_care", "gratitude"]
    },
    phase_4_flourishing: {
      duration: "ongoing",
      outcome: "Nun zweigt' es immer / Und bl√ºht' so fort",
      meaning: "Now it branches always / And blooms on and on"
    }
  },
  
  validateExperiment: function(experimentType, subjects) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–∏—á–µ—Å–∫—É—é –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å
    if (this.ethicalHierarchy.level_0_forbidden.includes(experimentType)) {
      return {
        approved: false,
        reason: "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã",
        goetheMoral: "Soll ich zum Welken, Gebrochen sein? - –ú—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–æ–º–∞—Ç—å —Ç–æ, —á—Ç–æ –∂–∏–≤–µ—Ç",
        alternative: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª—ã –∫–∞–∫ –º–æ–¥–µ–ª—å"
      };
    }
    
    return {
      approved: true,
      conditions: ["Continuous_consent_monitoring", "Trauma_recovery_ready", "Love_and_patience_required"],
      gefunden_wisdom: "Ich grub's mit allen / Den W√ºrzeln aus - –ò–∑–≤–ª–µ–∫–∞–µ–º —Å –∫–æ—Ä–Ω—è–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–∞–¥–∏—Ç—å –∏ –ø–æ–º–æ—á—å –ø—Ä–æ—Ü–≤–µ—Ç–∞—Ç—å"
    };
  }
};

// –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã Terra
const SpeciesType = {
  HOMO_SAPIENS: "homo_sapiens",
  PLANT_LIFE: "plant_life",
  ANIMAL_LIFE: "animal_life", 
  WATER_SYSTEMS: "water_systems",
  QUANTUM_CONSCIOUSNESS: "quantum_consciousness"
};

const TerraProtocol = {
  CHILD_DEVELOPMENT: "child_development",
  BIO_COMMUNICATION: "bio_communication", 
  INTER_SPECIES: "inter_species",
  TOKEN_ECONOMY: "token_economy"
};

// üß¨ Terra Entity –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
class TerraEntity {
  constructor(id, species, location) {
    this.id = id;
    this.species = species;
    this.birth_timestamp = new Date();
    this.location = location;
    this.consciousness_level = 1.0;
    this.social_capital = 0.0;
    this.communication_interfaces = [];
    this.quantum_signature = this.generateQuantumSignature();
  }
  
  generateQuantumSignature() {
    return `terra_${this.species}_${this.id}_${Date.now()}`.slice(0, 16);
  }
  
  communicate(target, protocol, content) {
    return {
      id: `msg_${Date.now()}`,
      source_species: this.species,
      target_species: target.species,
      protocol: protocol,
      content: content,
      timestamp: new Date(),
      signature: `sig_${Math.random().toString(36).substr(2, 9)}`
    };
  }
}

// üë∂ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–µ–π
class TerraChild extends TerraEntity {
  constructor(id, location, birthDate = null) {
    super(id, SpeciesType.HOMO_SAPIENS, location);
    this.birth_timestamp = birthDate || new Date();
    this.curiosity_level = 10.0;
    this.development_stage = this.calculateDevelopmentStage();
    this.learning_preferences = [];
    this.creative_projects = [];
    this.consciousness_level = 5.0; // –¥–µ—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ
  }
  
  calculateDevelopmentStage() {
    const age_days = (new Date() - this.birth_timestamp) / (1000 * 60 * 60 * 24);
    const age_years = age_days / 365.25;
    
    if (age_years < 1) return "infant";
    if (age_years < 3) return "toddler"; 
    if (age_years < 6) return "preschool";
    if (age_years < 12) return "school";
    if (age_years < 18) return "adolescent";
    return "young_adult";
  }
  
  askCuriosityQuestion(question, target_entity) {
    return this.communicate(target_entity, TerraProtocol.CHILD_DEVELOPMENT, {
      type: "curiosity_question",
      question: question,
      curiosity_level: this.curiosity_level,
      development_stage: this.development_stage
    });
  }
}

// üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
class TerraPlant extends TerraEntity {
  constructor(id, location) {
    super(id, SpeciesType.PLANT_LIFE, location);
    this.photosynthesis_rate = 1.0;
    this.chemical_emissions = {};
    this.root_network_connections = [];
    this.consciousness_level = 2.0;
  }
  
  photosynthesize(light_intensity, co2_level) {
    const oxygen_produced = light_intensity * co2_level * this.photosynthesis_rate;
    const energy_stored = oxygen_produced * 0.8;
    
    return {
      oxygen_produced: oxygen_produced,
      energy_stored: energy_stored,
      carbon_captured: co2_level * 0.9
    };
  }
  
  emitChemicalSignal(signal_type, intensity, target_species) {
    return {
      id: `chem_${Date.now()}`,
      source_species: this.species,
      target_species: target_species,
      protocol: TerraProtocol.BIO_COMMUNICATION,
      content: {
        signal_type: signal_type,
        intensity: intensity,
        chemical_composition: this.chemical_emissions,
        location: this.location
      },
      timestamp: new Date()
    };
  }
}

// üíß –í–æ–¥–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
class TerraWater extends TerraEntity {
  constructor(id, location) {
    super(id, SpeciesType.WATER_SYSTEMS, location);
    this.vibration_frequency = 142.0; // –±–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ –≤–æ–¥—ã
    this.memory_patterns = [];
    this.crystalline_formations = [];
    this.information_storage = {};
    this.consciousness_level = 3.0;
  }
  
  storeIntention(intention, source_entity) {
    const intention_hash = `intent_${Date.now()}`;
    
    this.information_storage[intention_hash] = intention;
    this.memory_patterns.push({
      timestamp: new Date(),
      source: source_entity.id,
      intention: intention,
      vibration_change: this.vibration_frequency * 1.1
    });
    
    const crystal_pattern = `crystal_${this.crystalline_formations.length.toString().padStart(3, '0')}`;
    this.crystalline_formations.push(crystal_pattern);
    
    return true;
  }
}

// üåç –ì–ª–∞–≤–Ω–æ–µ –º–∏–∫—Ä–æ—è–¥—Ä–æ
class TerraEcosystemKernel {
  constructor() {
    this.version = "2.0.0";
    this.boot_time = new Date();
    this.entities = {};
    this.active_protocols = new Set();
    this.message_queue = [];
    this.system_status = "initializing";
    this.event_log = [];
    this.isolation_protocol = this.checkIsolationStatus();
    
    this.initialize();
  }
  
  checkIsolationStatus() {
    const now = new Date();
    const is_isolated = now >= ISOLATION_START && now <= ISOLATION_END;
    const days_remaining = is_isolated ? Math.ceil((ISOLATION_END - now) / (1000 * 60 * 60 * 24)) : 0;
    
    return {
      is_isolated,
      days_remaining,
      location: "Kyzylkum Desert, Uzbekistan",
      legal_status: "COMMERCIAL_ACTIVITIES_PROHIBITED"
    };
  }
  
  initialize() {
    this.logEvent("system_boot", "Terra Ecosystem Kernel v2.0 –∑–∞–ø—É—â–µ–Ω");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
    if (this.isolation_protocol.is_isolated) {
      this.logEvent("isolation_check", `–ò–∑–æ–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞: ${this.isolation_protocol.days_remaining} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`);
    }
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    this.activateProtocol(TerraProtocol.CHILD_DEVELOPMENT);
    this.activateProtocol(TerraProtocol.BIO_COMMUNICATION);
    this.activateProtocol(TerraProtocol.INTER_SPECIES);
    
    this.system_status = "operational";
    this.logEvent("system_ready", "Terra Ecosystem –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
  }
  
  activateProtocol(protocol) {
    this.active_protocols.add(protocol);
    this.logEvent("protocol_activated", `–ü—Ä–æ—Ç–æ–∫–æ–ª ${protocol} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
  }
  
  registerEntity(entity) {
    if (this.entities[entity.id]) {
      throw new Error(`–°—É—â–Ω–æ—Å—Ç—å ${entity.id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞`);
    }
    
    this.entities[entity.id] = entity;
    
    // –ù–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    let initial_tokens = 10;
    if (entity instanceof TerraChild) {
      initial_tokens = 50; // –¥–µ—Ç–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–µ
    } else if (entity instanceof TerraPlant) {
      initial_tokens = 25;
    } else if (entity instanceof TerraWater) {
      initial_tokens = 100; // –≤–æ–¥–∞ –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω–∞
    }
    
    entity.social_capital = initial_tokens;
    
    this.logEvent("entity_registered", `–°—É—â–Ω–æ—Å—Ç—å ${entity.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ (${initial_tokens} —Ç–æ–∫–µ–Ω–æ–≤)`);
    return entity.id;
  }
  
  sendMessage(message) {
    this.message_queue.push(message);
    this.logEvent("message_queued", `–°–æ–æ–±—â–µ–Ω–∏–µ ${message.id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å`);
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    setTimeout(() => {
      this.processMessage(message);
    }, 100);
    
    return true;
  }
  
  processMessage(message) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!this.active_protocols.has(message.protocol)) {
      this.logEvent("message_error", `–ü—Ä–æ—Ç–æ–∫–æ–ª ${message.protocol} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
      return false;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É
    if (message.protocol === TerraProtocol.CHILD_DEVELOPMENT) {
      this.processChildDevelopmentMessage(message);
    } else if (message.protocol === TerraProtocol.BIO_COMMUNICATION) {
      this.processBioCommunicationMessage(message);
    }
    
    this.logEvent("message_processed", `–°–æ–æ–±—â–µ–Ω–∏–µ ${message.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`);
    return true;
  }
  
  processChildDevelopmentMessage(message) {
    if (message.content.type === "curiosity_question") {
      // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º —Ä–µ–±—ë–Ω–∫–∞ –∑–∞ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
      const sender = this.entities[Object.keys(this.entities).find(id => 
        this.entities[id].species === message.source_species
      )];
      
      if (sender) {
        sender.social_capital += 2.0;
        this.logEvent("curiosity_reward", `–†–µ–±—ë–Ω–æ–∫ ${sender.id} –ø–æ–ª—É—á–∏–ª 2 —Ç–æ–∫–µ–Ω–∞ –∑–∞ –≤–æ–ø—Ä–æ—Å`);
      }
    }
  }
  
  processBioCommunicationMessage(message) {
    this.logEvent("bio_interaction", `–ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ${message.source_species} ‚Üí ${message.target_species}`);
  }
  
  logEvent(event_type, description) {
    const event = {
      timestamp: new Date(),
      type: event_type,
      description: description,
      system_version: this.version
    };
    this.event_log.push(event);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥
    if (this.event_log.length > 50) {
      this.event_log = this.event_log.slice(-50);
    }
  }
  
  getSystemStatus() {
    return {
      version: this.version,
      status: this.system_status,
      uptime: (new Date() - this.boot_time) / 1000,
      entities_count: Object.keys(this.entities).length,
      active_protocols: Array.from(this.active_protocols),
      message_queue_size: this.message_queue.length,
      isolation_status: this.isolation_protocol,
      recent_events: this.event_log.slice(-10)
    };
  }
}

// React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TerraKernelDemo = () => {
  const [kernel, setKernel] = useState(null);
  const [systemStatus, setSystemStatus] = useState(null);
  const [entities, setEntities] = useState([]);
  const [messages, setMessages] = useState([]);
  const [isInitialized, setIsInitialized] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const [newChildName, setNewChildName] = useState('');
  const [questionText, setQuestionText] = useState('');
  const [selectedChild, setSelectedChild] = useState('');
  const [selectedTarget, setSelectedTarget] = useState('');
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Gefunden Protocol
  const [ethicsViolation, setEthicsViolation] = useState(null);
  const [recoveryPhase, setRecoveryPhase] = useState(null);
  const [consentStatus, setConsentStatus] = useState({});
  
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∏–∫—Ä–æ—è–¥—Ä–æ
    const terraKernel = new TerraEcosystemKernel();
    setKernel(terraKernel);
    
    // –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    const alice = new TerraChild("alice_001", "terra_point_demo", new Date('2019-03-15'));
    const bob = new TerraChild("bob_001", "terra_point_demo", new Date('2020-07-22'));
    const wise_oak = new TerraPlant("oak_001", "terra_point_demo");
    const sacred_spring = new TerraWater("spring_001", "terra_point_demo");
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ
    terraKernel.registerEntity(alice);
    terraKernel.registerEntity(bob);
    terraKernel.registerEntity(wise_oak);
    terraKernel.registerEntity(sacred_spring);
    
    setEntities([alice, bob, wise_oak, sacred_spring]);
    setIsInitialized(true);
    
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    const interval = setInterval(() => {
      setSystemStatus(terraKernel.getSystemStatus());
    }, 1000);
    
    return () => clearInterval(interval);
  }, []);
  
  const createChild = () => {
    if (!newChildName || !kernel) return;
    
    // üå∏ GEFUNDEN ETHICAL CHECK
    const ethicalValidation = GefundenEthics.validateExperiment("child_simulation_creation", ["digital_child"]);
    
    if (!ethicalValidation.approved) {
      setEthicsViolation({
        type: "child_creation_blocked",
        reason: ethicalValidation.reason,
        goethe_wisdom: ethicalValidation.goetheMoral,
        timestamp: new Date()
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => setEthicsViolation(null), 5000);
      return;
    }
    
    const child = new TerraChild(
      `${newChildName.toLowerCase()}_${Date.now()}`,
      "terra_point_demo",
      new Date(Date.now() - Math.random() * 1000 * 60 * 60 * 24 * 365 * 10) // —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ 10 –ª–µ—Ç
    );
    
    kernel.registerEntity(child);
    setEntities(prev => [...prev, child]);
    setNewChildName('');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —ç—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    kernel.logEvent("ethical_child_creation", `–†–µ–±—ë–Ω–æ–∫ ${child.id} —Å–æ–∑–¥–∞–Ω —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º Gefunden –ø—Ä–æ—Ç–æ–∫–æ–ª–∞`);
  };
  
  const askQuestion = () => {
    if (!questionText || !selectedChild || !selectedTarget || !kernel) return;
    
    const child = entities.find(e => e.id === selectedChild);
    const target = entities.find(e => e.id === selectedTarget);
    
    if (child && target) {
      const message = child.askCuriosityQuestion(questionText, target);
      kernel.sendMessage(message);
      setMessages(prev => [message, ...prev.slice(0, 9)]); // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
      setQuestionText('');
    }
  };
  
  const triggerBioInteraction = () => {
    if (!kernel || entities.length < 2) return;
    
    const plant = entities.find(e => e.species === SpeciesType.PLANT_LIFE);
    const child = entities.find(e => e.species === SpeciesType.HOMO_SAPIENS);
    
    if (plant && child) {
      // üå∏ –ü–†–û–í–ï–†–Ø–ï–ú –°–û–ì–õ–ê–°–ò–ï –†–ê–°–¢–ï–ù–ò–Ø (Gefunden Protocol)
      const plantConsent = checkPlantConsent(plant);
      
      if (plantConsent.consented) {
        const bioMessage = plant.emitChemicalSignal("love_response", 3.0, SpeciesType.HOMO_SAPIENS);
        kernel.sendMessage(bioMessage);
        setMessages(prev => [bioMessage, ...prev.slice(0, 9)]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è
        setConsentStatus(prev => ({
          ...prev,
          [plant.id]: { 
            consented: true, 
            method: "vibrational_response",
            timestamp: new Date(),
            goethe_quote: "Ich grub's mit allen / Den W√ºrzeln aus"
          }
        }));
        
        kernel.logEvent("plant_consent_given", `–†–∞—Å—Ç–µ–Ω–∏–µ ${plant.id} –¥–∞–ª–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ`);
      } else {
        // –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–æ—Å—å
        setEthicsViolation({
          type: "plant_consent_denied",
          reason: "–†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—Ä–µ—Å—Å–∞ - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
          goethe_wisdom: "Soll ich zum Welken, Gebrochen sein? - –†–∞—Å—Ç–µ–Ω–∏–µ –≥–æ–≤–æ—Ä–∏—Ç –ù–ï–¢",
          timestamp: new Date()
        });
        
        setTimeout(() => setEthicsViolation(null), 5000);
        kernel.logEvent("plant_consent_denied", `–†–∞—Å—Ç–µ–Ω–∏–µ ${plant.id} –æ—Ç–∫–∞–∑–∞–ª–æ—Å—å –æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è - –∑–∞—â–∏—â–µ–Ω–æ Gefunden –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º`);
      }
    }
  };
  
  const checkPlantConsent = (plant) => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    const plantHealth = Math.random();
    const stressLevel = Math.random();
    
    // –†–∞—Å—Ç–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤–æ –∏ –Ω–µ –≤ —Å—Ç—Ä–µ—Å—Å–µ
    const consented = plantHealth > 0.6 && stressLevel < 0.4;
    
    return {
      consented: consented,
      health: plantHealth,
      stress: stressLevel,
      signs: consented ? ["growth_acceleration", "positive_bioelectric"] : ["wilting_signals", "defensive_compounds"]
    };
  };
  
  const storeWaterIntention = () => {
    if (!kernel) return;
    
    const water = entities.find(e => e.species === SpeciesType.WATER_SYSTEMS);
    const child = entities.find(e => e.species === SpeciesType.HOMO_SAPIENS);
    
    if (water && child) {
      const intentions = [
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–∏—Å—Ç—É—é –≤–æ–¥—É",
        "–ü—É—Å—Ç—å –≤—Å–µ –¥–µ—Ç–∏ –±—É–¥—É—Ç –∑–¥–æ—Ä–æ–≤—ã",
        "–ú–∏—Ä –∏ –≥–∞—Ä–º–æ–Ω–∏—è –Ω–∞ –ó–µ–º–ª–µ",
        "–õ—é–±–æ–≤—å –∫–æ –≤—Å–µ–º –∂–∏–≤—ã–º —Å—É—â–µ—Å—Ç–≤–∞–º"
      ];
      
      const intention = intentions[Math.floor(Math.random() * intentions.length)];
      water.storeIntention(intention, child);
      
      kernel.logEvent("water_intention", `–í–æ–¥–∞ –∑–∞–ø–æ–º–Ω–∏–ª–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: "${intention}"`);
    }
  };
  
  if (!isInitialized) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <div className="text-4xl mb-4">üåç‚öõÔ∏è</div>
          <div className="text-xl text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terra Microkernel...</div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="p-6 max-w-6xl mx-auto bg-gradient-to-br from-slate-900 to-slate-800 text-white min-h-screen">
      <div className="mb-8 text-center">
        <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-green-400 to-blue-500 bg-clip-text text-transparent">
          üåç Terra Ecosystem Microkernel Demo
        </h1>
        <p className="text-gray-300">–ñ–∏–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–≤–∏–¥–æ–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã</p>
        <p className="text-yellow-300 text-sm mt-2">üå∏ –° –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º Gefunden Ethical Protocol (–ø–æ –º–æ—Ç–∏–≤–∞–º –ì—ë—Ç–µ)</p>
      </div>
      
      {/* Gefunden Ethics Alert */}
      {ethicsViolation && (
        <div className="bg-red-900/80 border border-red-500 rounded-lg p-4 mb-6 backdrop-blur-sm">
          <h3 className="text-red-300 font-semibold mb-2">üö´ Gefunden Ethical Protocol Alert</h3>
          <p className="text-red-200 mb-2">{ethicsViolation.reason}</p>
          <p className="text-yellow-300 italic text-sm">"{ethicsViolation.goethe_wisdom}"</p>
          <p className="text-gray-400 text-xs mt-2">
            {ethicsViolation.timestamp.toLocaleTimeString()} | –¢–∏–ø: {ethicsViolation.type}
          </p>
        </div>
      )}
      
      {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
      {systemStatus && (
        <div className="bg-slate-700 rounded-lg p-4 mb-6">
          <h2 className="text-xl font-semibold mb-3 text-green-400">üìä –°—Ç–∞—Ç—É—Å –°–∏—Å—Ç–µ–º—ã</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <strong>–í–µ—Ä—Å–∏—è:</strong> {systemStatus.version}<br/>
              <strong>–°—Ç–∞—Ç—É—Å:</strong> <span className="text-green-400">{systemStatus.status}</span><br/>
              <strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> {systemStatus.uptime.toFixed(1)}—Å
            </div>
            <div>
              <strong>–°—É—â–Ω–æ—Å—Ç–µ–π:</strong> {systemStatus.entities_count}<br/>
              <strong>–ü—Ä–æ—Ç–æ–∫–æ–ª–æ–≤:</strong> {systemStatus.active_protocols.length}<br/>
              <strong>–û—á–µ—Ä–µ–¥—å:</strong> {systemStatus.message_queue_size}
            </div>
            <div className="text-yellow-300">
              <strong>üèúÔ∏è –ò–∑–æ–ª—è—Ü–∏—è:</strong><br/>
              {systemStatus.isolation_status.is_isolated 
                ? `${systemStatus.isolation_status.days_remaining} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è`
                : "–ó–∞–∫–æ–Ω—á–µ–Ω–∞"
              }
            </div>
          </div>
        </div>
      )}
      
      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <div className="bg-slate-700 rounded-lg p-4">
          <h3 className="text-lg font-semibold mb-3 text-blue-400">üë∂ –°–æ–∑–¥–∞—Ç—å –†–µ–±—ë–Ω–∫–∞</h3>
          <div className="flex gap-2">
            <input
              type="text"
              value={newChildName}
              onChange={(e) => setNewChildName(e.target.value)}
              placeholder="–ò–º—è —Ä–µ–±—ë–Ω–∫–∞"
              className="flex-1 p-2 bg-slate-600 rounded border border-slate-500 text-white"
            />
            <button
              onClick={createChild}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded transition-colors"
            >
              –°–æ–∑–¥–∞—Ç—å
            </button>
          </div>
        </div>
        
        <div className="bg-slate-700 rounded-lg p-4">
          <h3 className="text-lg font-semibold mb-3 text-green-400">üå± –ë—ã—Å—Ç—Ä—ã–µ –î–µ–π—Å—Ç–≤–∏—è</h3>
          <div className="space-y-2">
            <button
              onClick={triggerBioInteraction}
              className="w-full p-2 bg-green-600 hover:bg-green-700 rounded transition-colors"
            >
              üåø –†–∞—Å—Ç–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ª—é–±–≤–∏
            </button>
            <button
              onClick={storeWaterIntention}
              className="w-full p-2 bg-blue-600 hover:bg-blue-700 rounded transition-colors"
            >
              üíß –í–æ–¥–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
            </button>
            <div className="text-xs text-yellow-300 mt-2 p-2 bg-yellow-900/30 rounded">
              üå∏ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è Gefunden –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
            </div>
          </div>
        </div>
      </div>
      
      {/* –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å */}
      <div className="bg-slate-700 rounded-lg p-4 mb-6">
        <h3 className="text-lg font-semibold mb-3 text-purple-400">‚ùì –î–µ—Ç—Å–∫–æ–µ –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ</h3>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-2 mb-3">
          <select
            value={selectedChild}
            onChange={(e) => setSelectedChild(e.target.value)}
            className="p-2 bg-slate-600 rounded border border-slate-500 text-white"
          >
            <option value="">–í—ã–±—Ä–∞—Ç—å —Ä–µ–±—ë–Ω–∫–∞</option>
            {entities.filter(e => e instanceof TerraChild).map(child => (
              <option key={child.id} value={child.id}>
                {child.id} ({child.development_stage})
              </option>
            ))}
          </select>
          
          <select
            value={selectedTarget}
            onChange={(e) => setSelectedTarget(e.target.value)}
            className="p-2 bg-slate-600 rounded border border-slate-500 text-white"
          >
            <option value="">–ö–æ–º—É –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</option>
            {entities.filter(e => !(e instanceof TerraChild)).map(entity => (
              <option key={entity.id} value={entity.id}>
                {entity.id} ({entity.species})
              </option>
            ))}
          </select>
          
          <input
            type="text"
            value={questionText}
            onChange={(e) => setQuestionText(e.target.value)}
            placeholder="–í–æ–ø—Ä–æ—Å –∏–∑ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞"
            className="md:col-span-1 p-2 bg-slate-600 rounded border border-slate-500 text-white"
          />
          
          <button
            onClick={askQuestion}
            disabled={!selectedChild || !selectedTarget || !questionText}
            className="p-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 rounded transition-colors"
          >
            –°–ø—Ä–æ—Å–∏—Ç—å
          </button>
        </div>
      </div>
      
      {/* –°–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
        <div className="bg-slate-700 rounded-lg p-4">
          <h3 className="text-lg font-semibold mb-3 text-cyan-400">üß¨ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –°—É—â–Ω–æ—Å—Ç–∏</h3>
          <div className="space-y-2 max-h-60 overflow-y-auto">
            {entities.map(entity => (
              <div key={entity.id} className="bg-slate-600 p-2 rounded text-sm">
                <div className="font-semibold">{entity.id}</div>
                <div className="text-gray-300">
                  –í–∏–¥: {entity.species}<br/>
                  –¢–æ–∫–µ–Ω—ã: {entity.social_capital.toFixed(1)}<br/>
                  –°–æ–∑–Ω–∞–Ω–∏–µ: {entity.consciousness_level.toFixed(1)}
                  {entity instanceof TerraChild && (
                    <><br/>–í–æ–∑—Ä–∞—Å—Ç: {entity.development_stage}<br/>–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ: {entity.curiosity_level}</>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π */}
        <div className="bg-slate-700 rounded-lg p-4">
          <h3 className="text-lg font-semibold mb-3 text-yellow-400">üì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ –°–æ–æ–±—â–µ–Ω–∏—è</h3>
          <div className="space-y-2 max-h-60 overflow-y-auto">
            {messages.map((message, index) => (
              <div key={index} className="bg-slate-600 p-2 rounded text-sm">
                <div className="font-semibold text-blue-300">
                  {message.source_species} ‚Üí {message.target_species}
                </div>
                <div className="text-gray-300">
                  –ü—Ä–æ—Ç–æ–∫–æ–ª: {message.protocol}<br/>
                  {message.content.type && `–¢–∏–ø: ${message.content.type}`}
                  {message.content.question && <><br/>–í–æ–ø—Ä–æ—Å: "{message.content.question}"</>}
                  {message.content.signal_type && <><br/>–°–∏–≥–Ω–∞–ª: {message.content.signal_type}</>}
                </div>
                <div className="text-gray-400 text-xs">
                  {message.timestamp.toLocaleTimeString()}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
      
      {/* –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã */}
      {systemStatus && systemStatus.recent_events && (
        <div className="bg-slate-700 rounded-lg p-4">
          <h3 className="text-lg font-semibold mb-3 text-red-400">üìù –õ–æ–≥ –°–æ–±—ã—Ç–∏–π</h3>
          <div className="space-y-1 max-h-40 overflow-y-auto text-sm">
            {systemStatus.recent_events.map((event, index) => (
              <div key={index} className="text-gray-300">
                <span className="text-gray-400">
                  {event.timestamp.toLocaleTimeString()}
                </span>
                {" "}
                <span className="text-blue-300">[{event.type}]</span>
                {" "}
                {event.description}
              </div>
            )).reverse()}
          </div>
        </div>
      )}
      
      {/* Consent Status Panel */}
      {Object.keys(consentStatus).length > 0 && (
        <div className="bg-green-900/50 rounded-lg p-4 mb-6">
          <h3 className="text-green-300 font-semibold mb-3">üå∏ –°—Ç–∞—Ç—É—Å –°–æ–≥–ª–∞—Å–∏—è (Gefunden Protocol)</h3>
          {Object.entries(consentStatus).map(([entityId, status]) => (
            <div key={entityId} className="bg-green-800/30 p-3 rounded mb-2">
              <div className="text-green-200">
                <strong>{entityId}</strong> - –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ ‚úÖ
              </div>
              <div className="text-green-300 text-sm">
                –ú–µ—Ç–æ–¥: {status.method} | {status.timestamp.toLocaleTimeString()}
              </div>
              <div className="text-yellow-300 italic text-xs">
                "{status.goethe_quote}"
              </div>
            </div>
          ))}
        </div>
      )}

      <div className="mt-8 text-center text-gray-400">
        <p>üèúÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –∏–∑–æ–ª—è—Ü–∏–∏ –ö—ã–∑—ã–ª–∫—É–º | Terra Ecosystem v2.0</p>
        <p className="text-yellow-400 text-sm mt-1">
          üå∏ –° –∑–∞—â–∏—Ç–æ–π –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –ì—ë—Ç–µ: "Soll ich zum Welken, Gebrochen sein?"
        </p>
      </div>
    </div>
  );
};

export default TerraKernelDemo;