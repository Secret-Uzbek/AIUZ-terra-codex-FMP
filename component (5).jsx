import React, { useState, useEffect } from 'react';

const { useStoredState } = hatch;

const UzbekistanEcoCalculator = () => {
  const [region, setRegion] = useStoredState('eco_region', 'tashkent');
  const [season, setSeason] = useStoredState('eco_season', 'summer');
  const [buildingType, setBuildingType] = useStoredState('eco_building_type', 'green_station');
  const [calculations, setCalculations] = useState({});
  const [language, setLanguage] = useStoredState('eco_language', 'ru');

  const translations = {
    ru: {
      title: 'üå± –≠–∫–æ-–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ö–ª–∏–º–∞—Ç–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞',
      subtitle: 'TERRA v6.0 - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –º–µ—Å—Ç–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º',
      region: '–†–µ–≥–∏–æ–Ω',
      season: '–°–µ–∑–æ–Ω',
      buildingType: '–¢–∏–ø –∑–¥–∞–Ω–∏—è',
      calculate: '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
      results: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞',
      temperature: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
      humidity: '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
      solar: '–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è',
      wind: '–í–µ—Ç—Ä–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è',
      water: '–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –≤–æ–¥–µ',
      cooling: '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ',
      heating: '–û—Ç–æ–ø–ª–µ–Ω–∏–µ',
      materials: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      efficiency: '–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
    },
    uz: {
      title: 'üå± O\'zbekiston Iqlimi uchun Eko-Kalkulyator',
      subtitle: 'TERRA v6.0 - Mahalliy sharoitlarga moslashish',
      region: 'Hudud',
      season: 'Fasl',
      buildingType: 'Bino turi',
      calculate: 'Eko-parametrlarni hisoblash',
      results: 'Hisoblash natijalari',
      temperature: 'Harorat',
      humidity: 'Namlik',
      solar: 'Quyosh energiyasi',
      wind: 'Shamol energiyasi',
      water: 'Suv ehtiyoji',
      cooling: 'Sovutish',
      heating: 'Isitish',
      materials: 'Tavsiya etilgan materiallar',
      efficiency: 'Energiya samaradorligi'
    },
    de: {
      title: 'üå± √ñko-Rechner f√ºr Usbekistans Klima',
      subtitle: 'TERRA v6.0 - Anpassung an lokale Bedingungen',
      region: 'Region',
      season: 'Jahreszeit',
      buildingType: 'Geb√§udetyp',
      calculate: '√ñko-Parameter berechnen',
      results: 'Berechnungsergebnisse',
      temperature: 'Temperatur',
      humidity: 'Luftfeuchtigkeit',
      solar: 'Solarenergie',
      wind: 'Windenergie',
      water: 'Wasserbedarf',
      cooling: 'K√ºhlung',
      heating: 'Heizung',
      materials: 'Empfohlene Materialien',
      efficiency: 'Energieeffizienz'
    },
    en: {
      title: 'üå± Eco-Calculator for Uzbekistan Climate',
      subtitle: 'TERRA v6.0 - Adaptation to local conditions',
      region: 'Region',
      season: 'Season',
      buildingType: 'Building Type',
      calculate: 'Calculate eco-parameters',
      results: 'Calculation Results',
      temperature: 'Temperature',
      humidity: 'Humidity',
      solar: 'Solar Energy',
      wind: 'Wind Energy',
      water: 'Water Demand',
      cooling: 'Cooling',
      heating: 'Heating',
      materials: 'Recommended Materials',
      efficiency: 'Energy Efficiency'
    }
  };

  const t = translations[language];

  const regions = {
    ru: {
      tashkent: '–¢–∞—à–∫–µ–Ω—Ç',
      samarkand: '–°–∞–º–∞—Ä–∫–∞–Ω–¥',
      bukhara: '–ë—É—Ö–∞—Ä–∞',
      khiva: '–•–∏–≤–∞',
      namangan: '–ù–∞–º–∞–Ω–≥–∞–Ω',
      andijan: '–ê–Ω–¥–∏–∂–∞–Ω',
      fergana: '–§–µ—Ä–≥–∞–Ω–∞',
      nukus: '–ù—É–∫—É—Å',
      termez: '–¢–µ—Ä–º–µ–∑',
      karshi: '–ö–∞—Ä—à–∏'
    },
    uz: {
      tashkent: 'Toshkent',
      samarkand: 'Samarqand',
      bukhara: 'Buxoro',
      khiva: 'Xiva',
      namangan: 'Namangan',
      andijan: 'Andijon',
      fergana: 'Farg\'ona',
      nukus: 'Nukus',
      termez: 'Termiz',
      karshi: 'Qarshi'
    },
    de: {
      tashkent: 'Taschkent',
      samarkand: 'Samarkand',
      bukhara: 'Buchara',
      khiva: 'Chiwa',
      namangan: 'Namangan',
      andijan: 'Andijon',
      fergana: 'Fergana',
      nukus: 'Nukus',
      termez: 'Termez',
      karshi: 'Qarshi'
    },
    en: {
      tashkent: 'Tashkent',
      samarkand: 'Samarkand',
      bukhara: 'Bukhara',
      khiva: 'Khiva',
      namangan: 'Namangan',
      andijan: 'Andijan',
      fergana: 'Fergana',
      nukus: 'Nukus',
      termez: 'Termez',
      karshi: 'Karshi'
    }
  };

  const seasons = {
    ru: { spring: '–í–µ—Å–Ω–∞', summer: '–õ–µ—Ç–æ', autumn: '–û—Å–µ–Ω—å', winter: '–ó–∏–º–∞' },
    uz: { spring: 'Bahor', summer: 'Yoz', autumn: 'Kuz', winter: 'Qish' },
    de: { spring: 'Fr√ºhling', summer: 'Sommer', autumn: 'Herbst', winter: 'Winter' },
    en: { spring: 'Spring', summer: 'Summer', autumn: 'Autumn', winter: 'Winter' }
  };

  const buildingTypes = {
    ru: {
      green_station: '–ó–µ–ª–µ–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
      residential: '–ñ–∏–ª–æ–µ –∑–¥–∞–Ω–∏–µ',
      commercial: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ',
      industrial: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ',
      educational: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ'
    },
    uz: {
      green_station: 'Yashil stansiya',
      residential: 'Turar-joy binosi',
      commercial: 'Tijorat binosi',
      industrial: 'Sanoat binosi',
      educational: 'Ta\'lim binosi'
    },
    de: {
      green_station: 'Gr√ºne Station',
      residential: 'Wohngeb√§ude',
      commercial: 'Gewerbegeb√§ude',
      industrial: 'Industriegeb√§ude',
      educational: 'Bildungsgeb√§ude'
    },
    en: {
      green_station: 'Green Station',
      residential: 'Residential Building',
      commercial: 'Commercial Building',
      industrial: 'Industrial Building',
      educational: 'Educational Building'
    }
  };

  // –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
  const climateData = {
    tashkent: {
      spring: { temp: [15, 25], humidity: 65, solar: 6.5, wind: 3.2, precipitation: 45 },
      summer: { temp: [25, 40], humidity: 35, solar: 8.8, wind: 2.8, precipitation: 15 },
      autumn: { temp: [10, 22], humidity: 55, solar: 5.2, wind: 3.5, precipitation: 35 },
      winter: { temp: [-5, 8], humidity: 75, solar: 3.1, wind: 4.1, precipitation: 55 }
    },
    samarkand: {
      spring: { temp: [16, 26], humidity: 60, solar: 7.0, wind: 3.8, precipitation: 40 },
      summer: { temp: [26, 42], humidity: 30, solar: 9.2, wind: 3.2, precipitation: 10 },
      autumn: { temp: [12, 24], humidity: 50, solar: 5.8, wind: 4.0, precipitation: 30 },
      winter: { temp: [-3, 10], humidity: 70, solar: 3.5, wind: 4.5, precipitation: 50 }
    },
    bukhara: {
      spring: { temp: [18, 28], humidity: 55, solar: 7.2, wind: 4.2, precipitation: 35 },
      summer: { temp: [28, 45], humidity: 25, solar: 9.5, wind: 3.8, precipitation: 8 },
      autumn: { temp: [14, 26], humidity: 45, solar: 6.0, wind: 4.5, precipitation: 25 },
      winter: { temp: [0, 12], humidity: 65, solar: 3.8, wind: 5.0, precipitation: 45 }
    },
    nukus: {
      spring: { temp: [12, 22], humidity: 70, solar: 6.0, wind: 5.5, precipitation: 50 },
      summer: { temp: [22, 38], humidity: 40, solar: 8.5, wind: 4.8, precipitation: 20 },
      autumn: { temp: [8, 20], humidity: 60, solar: 4.8, wind: 6.0, precipitation: 40 },
      winter: { temp: [-8, 5], humidity: 80, solar: 2.5, wind: 6.5, precipitation: 65 }
    }
  };

  const calculateEcoParameters = () => {
    const climate = climateData[region]?.[season] || climateData.tashkent.summer;
    
    const calc = {
      avgTemp: Math.round((climate.temp[0] + climate.temp[1]) / 2),
      tempRange: `${climate.temp[0]}¬∞C - ${climate.temp[1]}¬∞C`,
      humidity: `${climate.humidity}%`,
      solarPotential: `${climate.solar} –∫–í—Ç‚ãÖ—á/–º¬≤‚ãÖ–¥–µ–Ω—å`,
      windPotential: `${climate.wind} –º/—Å —Å—Ä–µ–¥–Ω—è—è`,
      
      // –†–∞—Å—á–µ—Ç—ã –¥–ª—è –∑–¥–∞–Ω–∏–π
      coolingNeeds: Math.max(0, (climate.temp[1] - 24) * 15),
      heatingNeeds: Math.max(0, (18 - climate.temp[0]) * 12),
      waterConsumption: 150 + (climate.temp[1] - 20) * 5,
      
      // –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      solarEfficiency: Math.min(95, climate.solar * 10 + 20),
      ventilationNeeds: climate.humidity > 60 ? '–í—ã—Å–æ–∫–∏–µ' : climate.humidity > 40 ? '–°—Ä–µ–¥–Ω–∏–µ' : '–ù–∏–∑–∫–∏–µ',
      
      // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
      materials: getMaterialsForClimate(climate),
      
      // –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã
      adaptations: getClimateAdaptations(climate, region, season)
    };
    
    setCalculations(calc);
  };

  const getMaterialsForClimate = (climate) => {
    const materials = [];
    
    if (climate.temp[1] > 35) {
      materials.push('–°–≤–µ—Ç–æ–æ—Ç—Ä–∞–∂–∞—é—â–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è');
      materials.push('–¢–µ—Ä–º–æ–∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏');
    }
    
    if (climate.temp[0] < 5) {
      materials.push('–£—Ç–µ–ø–ª–∏—Ç–µ–ª–∏ –∏–∑ —ç–∫–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
      materials.push('–¢—Ä–æ–π–Ω—ã–µ —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç—ã');
    }
    
    if (climate.humidity > 65) {
      materials.push('–í–ª–∞–≥–æ—Å—Ç–æ–π–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã');
      materials.push('–ê–Ω—Ç–∏–≥—Ä–∏–±–∫–æ–≤—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è');
    }
    
    if (climate.solar > 7) {
      materials.push('–°–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –≤—ã—Å–æ–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      materials.push('–§–æ—Ç–æ–≤–æ–ª—å—Ç–∞–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã');
    }
    
    if (climate.wind > 4) {
      materials.push('–í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏');
      materials.push('–ú–∞–ª—ã–µ –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã');
    }
    
    return materials.length > 0 ? materials : ['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–∫–æ-–º–∞—Ç–µ—Ä–∏–∞–ª—ã'];
  };

  const getClimateAdaptations = (climate, region, season) => {
    const adaptations = [];
    
    // –î–ª—è –∂–∞—Ä–∫–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞
    if (climate.temp[1] > 38) {
      adaptations.push('–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è');
      adaptations.push('–ó–µ–ª–µ–Ω—ã–µ –∫—Ä—ã—à–∏ –∏ —Ñ–∞—Å–∞–¥—ã');
      adaptations.push('–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è');
    }
    
    // –î–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞  
    if (climate.temp[0] < 0) {
      adaptations.push('–ü–∞—Å—Å–∏–≤–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ');
      adaptations.push('–¢–µ–ø–ª–æ–≤—ã–µ –Ω–∞—Å–æ—Å—ã');
      adaptations.push('–†–µ–∫—É–ø–µ—Ä–∞—Ü–∏—è —Ç–µ–ø–ª–∞');
    }
    
    // –î–ª—è –∑–∞—Å—É—à–ª–∏–≤–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞
    if (climate.precipitation < 30) {
      adaptations.push('–°–±–æ—Ä –¥–æ–∂–¥–µ–≤–æ–π –≤–æ–¥—ã');
      adaptations.push('–ö–∞–ø–µ–ª—å–Ω–æ–µ –æ—Ä–æ—à–µ–Ω–∏–µ');
      adaptations.push('–ö—Å–µ—Ä–æ—Ñ–∏—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è');
    }
    
    // –î–ª—è –≤–µ—Ç—Ä–µ–Ω–æ–≥–æ –∫–ª–∏–º–∞—Ç–∞
    if (climate.wind > 5) {
      adaptations.push('–í–µ—Ç—Ä–æ–∑–∞—â–∏—Ç–Ω—ã–µ –ø–æ—Å–∞–¥–∫–∏');
      adaptations.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Ç—Ä–æ–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏');
    }
    
    return adaptations.length > 0 ? adaptations : ['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ä—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏'];
  };

  useEffect(() => {
    calculateEcoParameters();
  }, [region, season, buildingType]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-900 via-blue-900 to-teal-800 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-block bg-green-400 text-black px-6 py-2 rounded-full mb-4 font-bold">
            üå± TERRA v6.0 ECO CALCULATOR
          </div>
          <h1 className="text-4xl font-bold text-white mb-2">{t.title}</h1>
          <p className="text-xl text-green-200">{t.subtitle}</p>
          
          {/* Language Selector */}
          <div className="flex justify-center gap-4 mt-6">
            {['ru', 'uz', 'de', 'en'].map(lang => (
              <button
                key={lang}
                onClick={() => setLanguage(lang)}
                className={`px-4 py-2 rounded-lg font-semibold transition-all ${
                  language === lang 
                    ? 'bg-green-400 text-black' 
                    : 'bg-white/20 text-white hover:bg-white/30'
                }`}
              >
                {lang === 'ru' && 'üá∑üá∫ –†–£'}
                {lang === 'uz' && 'üá∫üáø UZ'}
                {lang === 'de' && 'üá©üá™ DE'}
                {lang === 'en' && 'üá¨üáß EN'}
              </button>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Input Panel */}
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
            <h2 className="text-2xl font-bold text-white mb-6">‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã</h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-white mb-3 font-semibold">{t.region}:</label>
                <select
                  value={region}
                  onChange={(e) => setRegion(e.target.value)}
                  className="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30"
                >
                  {Object.entries(regions[language]).map(([key, value]) => (
                    <option key={key} value={key} className="bg-gray-800">{value}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-white mb-3 font-semibold">{t.season}:</label>
                <div className="grid grid-cols-2 gap-2">
                  {Object.entries(seasons[language]).map(([key, value]) => (
                    <button
                      key={key}
                      onClick={() => setSeason(key)}
                      className={`p-3 rounded-lg font-semibold transition-all ${
                        season === key 
                          ? 'bg-green-500 text-white' 
                          : 'bg-white/20 text-white hover:bg-white/30'
                      }`}
                    >
                      {value}
                    </button>
                  ))}
                </div>
              </div>

              <div>
                <label className="block text-white mb-3 font-semibold">{t.buildingType}:</label>
                <select
                  value={buildingType}
                  onChange={(e) => setBuildingType(e.target.value)}
                  className="w-full p-3 rounded-lg bg-white/20 text-white border border-white/30"
                >
                  {Object.entries(buildingTypes[language]).map(([key, value]) => (
                    <option key={key} value={key} className="bg-gray-800">{value}</option>
                  ))}
                </select>
              </div>

              <button
                onClick={calculateEcoParameters}
                className="w-full bg-gradient-to-r from-green-500 to-teal-500 text-white p-4 rounded-lg font-bold hover:from-green-600 hover:to-teal-600 transition-all"
              >
                üîÑ {t.calculate}
              </button>
            </div>

            {/* –ö–∞—Ä—Ç–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞ */}
            <div className="mt-6 bg-white/5 p-4 rounded-lg">
              <h3 className="text-white font-bold mb-2">üó∫Ô∏è –ö–∞—Ä—Ç–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤</h3>
              <div className="grid grid-cols-3 gap-1 text-xs">
                {Object.entries(regions[language]).map(([key, value]) => (
                  <div
                    key={key}
                    onClick={() => setRegion(key)}
                    className={`p-2 rounded cursor-pointer text-center transition-all ${
                      region === key ? 'bg-green-500 text-white' : 'bg-white/20 text-white/80 hover:bg-white/30'
                    }`}
                  >
                    {value}
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Results Panel */}
          <div className="lg:col-span-2 space-y-6">
            <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
              <h2 className="text-2xl font-bold text-white mb-6">üìä {t.results}</h2>
              
              {calculations.avgTemp && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
                  <div className="space-y-4">
                    <div className="bg-red-500/20 p-4 rounded-lg border border-red-400">
                      <h3 className="text-red-300 font-bold mb-2">üå°Ô∏è {t.temperature}</h3>
                      <p className="text-white text-lg">{calculations.tempRange}</p>
                      <p className="text-white/80">–°—Ä–µ–¥–Ω–µ–µ: {calculations.avgTemp}¬∞C</p>
                    </div>

                    <div className="bg-blue-500/20 p-4 rounded-lg border border-blue-400">
                      <h3 className="text-blue-300 font-bold mb-2">üíß {t.humidity}</h3>
                      <p className="text-white text-lg">{calculations.humidity}</p>
                    </div>

                    <div className="bg-yellow-500/20 p-4 rounded-lg border border-yellow-400">
                      <h3 className="text-yellow-300 font-bold mb-2">‚òÄÔ∏è {t.solar}</h3>
                      <p className="text-white text-lg">{calculations.solarPotential}</p>
                      <p className="text-white/80">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {calculations.solarEfficiency}%</p>
                    </div>

                    <div className="bg-gray-500/20 p-4 rounded-lg border border-gray-400">
                      <h3 className="text-gray-300 font-bold mb-2">üí® {t.wind}</h3>
                      <p className="text-white text-lg">{calculations.windPotential}</p>
                    </div>
                  </div>

                  {/* –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ */}
                  <div className="space-y-4">
                    <div className="bg-cyan-500/20 p-4 rounded-lg border border-cyan-400">
                      <h3 className="text-cyan-300 font-bold mb-2">‚ùÑÔ∏è {t.cooling}</h3>
                      <p className="text-white text-lg">{calculations.coolingNeeds} –∫–í—Ç‚ãÖ—á/–º¬≤</p>
                    </div>

                    <div className="bg-orange-500/20 p-4 rounded-lg border border-orange-400">
                      <h3 className="text-orange-300 font-bold mb-2">üî• {t.heating}</h3>
                      <p className="text-white text-lg">{calculations.heatingNeeds} –∫–í—Ç‚ãÖ—á/–º¬≤</p>
                    </div>

                    <div className="bg-purple-500/20 p-4 rounded-lg border border-purple-400">
                      <h3 className="text-purple-300 font-bold mb-2">üíß {t.water}</h3>
                      <p className="text-white text-lg">{calculations.waterConsumption} –ª/—á–µ–ª‚ãÖ–¥–µ–Ω—å</p>
                    </div>

                    <div className="bg-green-500/20 p-4 rounded-lg border border-green-400">
                      <h3 className="text-green-300 font-bold mb-2">üå¨Ô∏è –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è</h3>
                      <p className="text-white text-lg">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: {calculations.ventilationNeeds}</p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
            {calculations.materials && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                  <h3 className="text-xl font-bold text-white mb-4">üèóÔ∏è {t.materials}</h3>
                  <ul className="space-y-2">
                    {calculations.materials.map((material, index) => (
                      <li key={index} className="text-white flex items-center">
                        <span className="text-green-400 mr-2">‚Ä¢</span>
                        {material}
                      </li>
                    ))}
                  </ul>
                </div>

                <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-6 border border-white/20">
                  <h3 className="text-xl font-bold text-white mb-4">üîß –ê–¥–∞–ø—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ä—ã</h3>
                  <ul className="space-y-2">
                    {calculations.adaptations.map((adaptation, index) => (
                      <li key={index} className="text-white flex items-center">
                        <span className="text-blue-400 mr-2">‚Ä¢</span>
                        {adaptation}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8 text-white/80">
          <div className="bg-green-400/20 rounded-lg p-4 border border-green-400/30">
            <p className="font-bold">üå± TERRA v6.0 ECO CALCULATOR UZBEKISTAN</p>
            <p>CREATOR: –ê–±–¥—É—Ä–∞—à–∏–¥ –ê–±–¥—É–∫–∞—Ä–∏–º–æ–≤ | secret.uzbek@tutamail.com</p>
            <p>–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞</p>
            <p className="text-sm">‚ö° Quantum Eco-Calculation Engine | {new Date().toLocaleString('ru-RU')}</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UzbekistanEcoCalculator;